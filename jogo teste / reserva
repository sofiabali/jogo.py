import pygame # type: ignore

pygame.init()

tamanho_da_tela = (1000, 1000)
tela = pygame.display.set_mode(tamanho_da_tela)
pygame.display.set_caption("break bricks")

tamanho_bola = 15
bola = pygame.Rect(100, 500, tamanho_bola, tamanho_bola)
tamanho_jogador = 100
jogador = pygame.Rect(0, 950, tamanho_jogador, 15)


qntd_blocos_linha = 8
qntd_linha_blocos = 8
qntd_total_blocos = qntd_blocos_linha * qntd_linha_blocos

def criar_blocos(qntd_blocos_linha, qntd_linha_blocos):
    altura_tela = tamanho_da_tela[1]
    largura_tela = tamanho_da_tela[0]
    distancia_bloco = 10
    largura_bloco = largura_tela / 8  - distancia_bloco
    altura_bloco = 20
    distancia_entre_linhas = altura_bloco + 15

def criar_blocos(qntd_blocos_linha, qntd_linha_blocos):
    altura_tela = tamanho_da_tela[1]
    largura_tela = tamanho_da_tela[0]
    distancia_bloco = 10
    largura_bloco = largura_tela / 8 - distancia_bloco
    altura_bloco = 20
    distancia_entre_linhas = altura_bloco + 15

    blocos = []
    cores_dos_blocos = [cores["verde"], cores["amarela"], cores["azul"], cores["rosa"]]  

    for j in range(qntd_linha_blocos):
        for i in range(qntd_blocos_linha):
            cor = cores_dos_blocos[(i + j) % len(cores_dos_blocos)] 
            bloco = pygame.Rect(i * (largura_bloco + distancia_bloco), j * distancia_entre_linhas, largura_bloco, altura_bloco)
            blocos.append((bloco, cor))  

    return blocos

def desenhar_blocos(blocos):
    for bloco, cor in blocos:  
        pygame.draw.rect(tela, cor, bloco)  


cores = {
    "branca":(255, 255, 255),
    "preta":(0, 0, 0),
    "amarela":(255, 255, 0),
    "azul": (0, 0, 255),
    "verde": (0, 255, 0),
    "rosa": (255, 0, 132),
    "vermelho": (255, 0, 0),
    "verdee": (50,205,50),
    "verdeee": (66,111,66),
    "verdeeee": (35,142,104),
    "verdeeeee": (79,79,47)
}


fim_de_jogo = False
pontuacao = 0
movimento_bola = [2 , -2]


def desenhar_inicio_jogo():
    tela.fill(cores["preta"])
    pygame.draw.rect(tela, cores["azul"], jogador)
    pygame.draw.rect(tela, cores["branca"], bola)


def movimentar_jogador(evento):
    if evento.type == pygame.KEYDOWN:
        if evento.key == pygame.K_RIGHT:
            if (jogador.x + tamanho_jogador) < tamanho_da_tela[0]:
                jogador.x = jogador.x + 3
        if evento.key == pygame.K_LEFT:
            if jogador.x > 0:
                jogador.x = jogador.x - 3


def movimentar_bola(bola, blocos):
    global movimento_bola
    bola.x += movimento_bola[0]
    bola.y += movimento_bola[1]

    if bola.x <= 0 or bola.x + tamanho_bola >= tamanho_da_tela[0]:
        movimento_bola[0] = -movimento_bola[0]
    if bola.y <= 0:
        movimento_bola[1] = -movimento_bola[1]

    if bola.y + tamanho_bola >= tamanho_da_tela[1]:
        return False 

    if jogador.collidepoint(bola.x + tamanho_bola // 2, bola.y + tamanho_bola):
        movimento_bola[1] = -movimento_bola[1]

    for bloco, cor in blocos:
        if bloco.collidepoint(bola.x, bola.y):
            blocos.remove((bloco, cor))
            movimento_bola[1] = -movimento_bola[1]
            break

    return True 

def atualizar_pontuacao():
    fonte = pygame.font.Font(None, 30)
    texto = fonte.render(f"Pontuação: {qntd_total_blocos - len(blocos)}", 1, cores["amarela"])
    tela.blit(texto, (0, 780))

blocos = criar_blocos(qntd_blocos_linha, qntd_linha_blocos)

while not fim_de_jogo:
    desenhar_inicio_jogo()
    desenhar_blocos(blocos)
    atualizar_pontuacao()
    
    for evento in pygame.event.get():
        if evento.type == pygame.QUIT:
            fim_de_jogo = True
            
    movimentar_jogador(evento)
    
    
    bola_em_jogo = movimentar_bola(bola, blocos)  
    if not bola_em_jogo:  
        fim_de_jogo = True
        
    pygame.time.wait(1)
    pygame.display.flip()

pygame.quit()
